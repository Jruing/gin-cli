// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package domain

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createDomain = `-- name: CreateDomain :one
INSERT INTO Domains (domain, status, created)
VALUES ($1, $2, $3)
RETURNING id, domain, status, created
`

type CreateDomainParams struct {
	Domain  string
	Status  int32
	Created pgtype.Timestamp
}

func (q *Queries) CreateDomain(ctx context.Context, arg CreateDomainParams) (Domain, error) {
	row := q.db.QueryRow(ctx, createDomain, arg.Domain, arg.Status, arg.Created)
	var i Domain
	err := row.Scan(
		&i.ID,
		&i.Domain,
		&i.Status,
		&i.Created,
	)
	return i, err
}

const deleteDomain = `-- name: DeleteDomain :exec
delete
from Domains
where id = $1
`

func (q *Queries) DeleteDomain(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteDomain, id)
	return err
}

const getDomainCount = `-- name: GetDomainCount :one
select count(*)
from Domains where ($1::varchar = '' or domain ilike "%" || $1::varchar || "%")
                or 1 = 1
`

func (q *Queries) GetDomainCount(ctx context.Context, dollar_1 string) (int64, error) {
	row := q.db.QueryRow(ctx, getDomainCount, dollar_1)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getDomainDetail = `-- name: GetDomainDetail :many
select  id,
        domain,
        status,
        created
from Domains where ($1::varchar = '' or domain ilike "%" || $1::varchar || "%")
                or 1 = 1 limit $2 offset $3
`

type GetDomainDetailParams struct {
	Column1 string
	Limit   int32
	Offset  int32
}

func (q *Queries) GetDomainDetail(ctx context.Context, arg GetDomainDetailParams) ([]Domain, error) {
	rows, err := q.db.Query(ctx, getDomainDetail, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Domain
	for rows.Next() {
		var i Domain
		if err := rows.Scan(
			&i.ID,
			&i.Domain,
			&i.Status,
			&i.Created,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDomain = `-- name: UpdateDomain :exec
UPDATE Domains
set domain=$2,
    status=$3,
    created=$4
WHERE id = $1
`

type UpdateDomainParams struct {
	ID      int32
	Domain  string
	Status  int32
	Created pgtype.Timestamp
}

func (q *Queries) UpdateDomain(ctx context.Context, arg UpdateDomainParams) error {
	_, err := q.db.Exec(ctx, updateDomain,
		arg.ID,
		arg.Domain,
		arg.Status,
		arg.Created,
	)
	return err
}
