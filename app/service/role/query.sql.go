// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package role

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createRole = `-- name: CreateRole :exec
INSERT INTO Roles (rolename, status, created)
VALUES ($1, $2, $3)
RETURNING id, rolename, status, created
`

type CreateRoleParams struct {
	Rolename string
	Status   int32
	Created  pgtype.Timestamp
}

func (q *Queries) CreateRole(ctx context.Context, arg CreateRoleParams) error {
	_, err := q.db.Exec(ctx, createRole, arg.Rolename, arg.Status, arg.Created)
	return err
}

const deleteRole = `-- name: DeleteRole :exec
delete
from Roles
where id = $1
`

func (q *Queries) DeleteRole(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteRole, id)
	return err
}

const getRoleCount = `-- name: GetRoleCount :one
select count(*)
from Roles where ($1::varchar = '' or rolename ilike "%" || $1::varchar || "%")
              or 1 = 1
`

func (q *Queries) GetRoleCount(ctx context.Context, dollar_1 string) (int64, error) {
	row := q.db.QueryRow(ctx, getRoleCount, dollar_1)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getRoleDetail = `-- name: GetRoleDetail :many
select id,
       rolename,
       status,
       created
from Roles where ($1::varchar = '' or rolename ilike "%" || $1::varchar || "%")
              or 1 = 1 limit $2 offset $3
`

type GetRoleDetailParams struct {
	Column1 string
	Limit   int32
	Offset  int32
}

func (q *Queries) GetRoleDetail(ctx context.Context, arg GetRoleDetailParams) ([]Role, error) {
	rows, err := q.db.Query(ctx, getRoleDetail, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Role
	for rows.Next() {
		var i Role
		if err := rows.Scan(
			&i.ID,
			&i.Rolename,
			&i.Status,
			&i.Created,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRole = `-- name: UpdateRole :exec
UPDATE Roles
set rolename=$2,
    status=$3,
    created=$4
WHERE id = $1
`

type UpdateRoleParams struct {
	ID       int32
	Rolename string
	Status   int32
	Created  pgtype.Timestamp
}

func (q *Queries) UpdateRole(ctx context.Context, arg UpdateRoleParams) error {
	_, err := q.db.Exec(ctx, updateRole,
		arg.ID,
		arg.Rolename,
		arg.Status,
		arg.Created,
	)
	return err
}
