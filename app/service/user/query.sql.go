// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package user

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkUser = `-- name: CheckUser :one
select count(1)
from Users
where username = $1
  and password = $2
`

type CheckUserParams struct {
	Username string
	Password string
}

func (q *Queries) CheckUser(ctx context.Context, arg CheckUserParams) (int64, error) {
	row := q.db.QueryRow(ctx, checkUser, arg.Username, arg.Password)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO Users (nickname, username, password, sex, email, status, created)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, nickname, username, password, sex, email, status, created
`

type CreateUserParams struct {
	Nickname pgtype.Text
	Username string
	Password string
	Sex      pgtype.Text
	Email    string
	Status   int32
	Created  pgtype.Timestamp
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Nickname,
		arg.Username,
		arg.Password,
		arg.Sex,
		arg.Email,
		arg.Status,
		arg.Created,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Nickname,
		&i.Username,
		&i.Password,
		&i.Sex,
		&i.Email,
		&i.Status,
		&i.Created,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
delete
from Users
where id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUserCount = `-- name: GetUserCount :one
select count(*)
from Users
where ($1::varchar = '' or username ilike "%" || $1::varchar || "%")
    and ($2::varchar = '' or nickname ilike "%" || $2::varchar || "%")
   or 1 = 1
`

type GetUserCountParams struct {
	Column1 string
	Column2 string
}

func (q *Queries) GetUserCount(ctx context.Context, arg GetUserCountParams) (int64, error) {
	row := q.db.QueryRow(ctx, getUserCount, arg.Column1, arg.Column2)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getUserDetail = `-- name: GetUserDetail :many
select id,
       nickname,
       username,
       password,
       sex,
       email,
       status,
       created
from Users
where ($1::varchar = '' or username ilike "%" || $1::varchar || "%")
    and ($2::varchar = '' or nickname ilike "%" || $2::varchar || "%")
   or 1 = 1
limit $3 offset $4
`

type GetUserDetailParams struct {
	Column1 string
	Column2 string
	Limit   int32
	Offset  int32
}

func (q *Queries) GetUserDetail(ctx context.Context, arg GetUserDetailParams) ([]User, error) {
	rows, err := q.db.Query(ctx, getUserDetail,
		arg.Column1,
		arg.Column2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Nickname,
			&i.Username,
			&i.Password,
			&i.Sex,
			&i.Email,
			&i.Status,
			&i.Created,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE Users
set nickname=$2,
    username=$3,
    password=$4,
    sex=$5,
    email=$6,
    status=$7
WHERE id = $1
`

type UpdateUserParams struct {
	ID       int32
	Nickname pgtype.Text
	Username string
	Password string
	Sex      pgtype.Text
	Email    string
	Status   int32
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.ID,
		arg.Nickname,
		arg.Username,
		arg.Password,
		arg.Sex,
		arg.Email,
		arg.Status,
	)
	return err
}
